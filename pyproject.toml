[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools >= 65.3.0", # required by pyproject+setuptools_scm integration and editable installs
  "setuptools_scm[toml] >= 7.0.5" # required for "no-local-version" scheme
]

[dependency-groups]
dev = [
  "build>=1.2.2",
  "coverage>=7.5.3",
  "pip>=24.0",
  "pipx>=1.7.1",
  "pre-commit-uv>=4.1.4",
  "pytest>=8.0.0",
  "pytest-benchmark>=4.0.0",
  "pytest-plus>=0.7.0",
  "setuptools>=80.9.0",
  "tox>=4.28.3",
  "twine>=6.1.0"
]
docs = [
  "cairosvg>=2.6.0",
  "markdown-exec>=1.3.0",
  "mkdocs-autorefs",
  "mkdocs-gen-files>=0.4.0",
  "mkdocs-htmlproofer-plugin>=0.10.2",
  "mkdocs-material-extensions>=1.1.1",
  "mkdocs-material>=9.0.13",
  "mkdocs>=1.4.2",
  "pillow>=9.4.0",
  "pipdeptree>=2.4.0",
  "pymdown-extensions>=9.9.2"
]
integration = ["ansible-core>=2.15", "nox>=2024.3"]
lint = ["pre-commit>=3.5.0", "pre-commit-uv>=4.1.4"]
lower = [
  "build==1.3.0",
  "diskcache==5.6.3",
  "gitpython==3.1.45",
  "packaging==25",
  "pip==24.3.1", # py_package (before installation might fail, including with tox)
  "pluggy==1.6.0",
  "pyyaml==5.1",
  "rich==12.0.0", # typer, twine indirect
  "setuptools", # py_package due to running setup.py
  "shellingham==1.5.4",
  "subprocess-tee==0.4.2",
  'tomli >= 2.0.1 ; python_version < "3.11"', # tox v4
  "twine==6.1.0",
  "typer-config==1.4.2",
  "typer==0.16.0"
]

[project]
authors = [{"email" = "sorin.sbarnea@gmail.com", "name" = "Sorin Sbarnea"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Operating System :: MacOS",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: Utilities"
]
dependencies = [
  "build>=1.2.2",
  "diskcache>=5.2.1",
  "gitpython>=3.1.26",
  "packaging>=22",
  "pip>=21.0.1",
  "pluggy>=1.5.0",
  "pyyaml>=5.1",
  "rich>=10.11.0",
  "setuptools",
  "shellingham>=1.5.4",
  "subprocess-tee>=0.4.1",
  "tomli>=2.0.1 ; python_full_version < '3.11'",
  "twine>=3.4.1",
  "typer-config>=1.4.0",
  "typer>=0.16.0"
]
dynamic = ["version"]
license = "MIT"
name = "mk"
readme = "docs/README.md"
# https://peps.python.org/pep-0621/#readme
requires-python = ">=3.10"

[project.entry-points."mk_tools"]
ansible = "mk.tools.ansible:AnsibleTool"
cmake = "mk.tools.cmake:CMakeTool"
git = "mk.tools.git:GitTool"
make = "mk.tools.make:MakeTool"
node = "mk.tools.node:NodeTool"
nox = "mk.tools.nox:NoxTool"
pre = "mk.tools.pre:PreTool"
pre-commit = "mk.tools.pre_commit:PreCommitTool"
pypackage = "mk.tools.py_package:PyPackageTool"
pytest = "mk.tools.pytest:PyTestTool"
shell = "mk.tools.shell:ShellTool"
taskfile = "mk.tools.taskfile:TaskfileTool"
tox = "mk.tools.tox:ToxTool"

[project.optional-dependencies]
docs = [
  "cairosvg>=2.6.0",
  "markdown-exec>=1.3.0",
  "mkdocs-autorefs",
  "mkdocs-gen-files>=0.4.0",
  "mkdocs-htmlproofer-plugin>=0.10.2",
  "mkdocs-material-extensions>=1.1.1",
  "mkdocs-material>=9.0.13",
  "mkdocs>=1.4.2",
  "pillow>=9.4.0",
  "pipdeptree>=2.4.0",
  "pymdown-extensions>=9.9.2"
]
test = [
  "coverage>=7.5.3",
  "pytest>=8.0.0",
  "pytest-benchmark>=4.0.0",
  "pytest-plus>=0.7.0",
  "tox>=4.28.3" # older version can fail to exit when calling --showconfig
]

[project.scripts]
mk = "mk.__main__:cli"
pre = "mk.pre:app"

[project.urls]
changelog = "https://github.com/pycontribs/mk/releases"
documentation = "https://mk.readthedocs.io/"
homepage = "https://github.com/pycontribs/mk"
repository = "https://github.com/pycontribs/mk"

[tool.black]
# keep this value because typer does not accept new annotations such str | None
# from https://peps.python.org/pep-0604/
target-version = ["py39"]

# Keep this default because xml/report do not know to use load it from config file:
# data_file = ".coverage"
[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
exclude_also = ["pragma: no cover", "if TYPE_CHECKING:"]
# Increase it just so it would pass on any single-python run
fail_under = 44
# During development we might remove code (files) with coverage data, and we dont want to fail:
ignore_errors = true
omit = ["test/*"]
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
concurrency = ["multiprocessing", "thread"]
# Do not use branch until bug is fixes:
# https://github.com/nedbat/coveragepy/issues/605
# branch = true
parallel = true
source = ["src"]

[tool.isort]
profile = "black"

[tool.mypy]
color_output = true
error_summary = true
exclude = [".ansible", ".cache", ".tox", "build", "dist"]
python_version = "3.10"
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["diskcache", "pytest_benchmark.fixture"]

[tool.ruff]
# Same as Black.
line-length = 88
# keep this as typer does not support new annotations format
target-version = "py39"

[tool.ruff.lint]
ignore = [
  # By design
  "COM812",
  # Disabled due to typer not supporting new annotations format
  "UP007",
  "LOG015",
  # temporary disabled until we fix them:
  "ANN",
  "B",
  "T",
  "D",
  "E",
  "PT",
  "ERA",
  "PTH",
  "C901",
  "ARG",
  "FBT",
  "SIM",
  "PGH",
  "TC",
  "PLR",
  "INP",
  "RET"
]
select = ["ALL"]
flake8-pytest-style.parametrize-values-type = "tuple"
isort.known-first-party = ["mk"]
per-file-ignores."test/**/*.py" = ["S"]
pydocstyle.convention = "google"

[tool.setuptools_scm]
# To prevent accidental pick of mobile version tags such 'v6'
git_describe_command = [
  "git",
  "describe",
  "--dirty",
  "--long",
  "--tags",
  "--match",
  "v*.*"
]
local_scheme = "no-local-version"
tag_regex = "^(?P<prefix>v)?(?P<version>[0-9.]+)(?P<suffix>.*)?$"
write_to = "src/mk/_version.py"

[tool.tomlsort]
# used by pre-commit hook
in_place = true
sort_inline_arrays = false
sort_inline_tables = true
sort_table_keys = true

[tool.tox]
env_list = ["py", "lint", "docs", "pkg", "lower", "devel", "integration"]
requires = [
  "pip>=24",
  "setuptools>=65.3",
  "tox>=4.28.3",
  "tox-extra>=2.1",
  "tox-uv>=1.27"
]
skip_missing_interpreters = true

[tool.tox.env.clean]
commands = [
  "find . -type d \\( -name __pycache__ -o -name .mypy_cache \\) -delete",
  "find . -type f \\( -name '*.py[co]' -o -name \".coverage*\" -o -name coverage.xml \\) -delete"
]
commands_post = []
commands_pre = []
deps = []
description = "Remove temporary files"
skip_install = true

[tool.tox.env.deps]
commands = [
  [
    "pre-commit",
    "run",
    "--all-files",
    "--show-diff-on-failure",
    "--hook-stage",
    "manual",
    "deps"
  ],
  [
    "pre-commit",
    "autoupdate"
  ],
  {extend = true, of = ["tool", "tox", "env", "lint", "commands"], replace = "ref"}
]
commands_post = [
  {extend = true, of = ["tool", "tox", "env", "lint", "commands_post"], replace = "ref"}
]
commands_pre = [
  {extend = true, of = ["tool", "tox", "env", "lint", "commands_pre"], replace = "ref"}
]
dependency_groups = [
  {extend = true, of = ["tool", "tox", "env", "lint", "dependency_groups"], replace = "ref"}
]
description = "Bump all test dependencies"
env_dir = "{work_dir}/lint"
runner = "{[tool.tox.testenv.lint]runner}"
skip_install = true

[tool.tox.env.devel]
commands = [
  [
    "sh",
    "-c",
    "uv pip list -q --format=freeze | tr '\\n' ','"
  ],
  {extend = true, of = ["tool", "tox", "env_run_base", "commands"], replace = "ref"},
  [
    "git",
    "restore",
    "uv.lock"
  ]
]
description = "Run the tests with newest dependencies (no lock and allowing prereleases)"
runner = "uv-venv-lock-runner"
uv_sync_flags = ["--upgrade", "--prerelease=allow"]
uv_sync_locked = false

[tool.tox.env.docs]
commands = [
  [
    "sh",
    "-c",
    "cd docs && mk changelog"
  ],
  [
    "mkdocs",
    {default = ["build", "--strict", "--site-dir=_readthedocs/html/"], extend = true, replace = "posargs"}
  ]
]
description = "Builds docs"
extras = ["docs"]
package = "editable"
skip_install = false

[tool.tox.env.integration]
commands = [["ansible", "--version"], ["nox", "--version"], ["mk", "test-integration"]]
dependency_groups = ["integration"]
description = "Run integrations tests"
package = "editable"

[tool.tox.env.lint]
commands = [
  [
    "{env_python}",
    "-m",
    "pre_commit",
    "run",
    "--all-files",
    "--show-diff-on-failure",
    {extend = true, replace = "posargs"}
  ]
]
dependency_groups = ["lint"]
description = "Run all linters"
runner = "uv-venv-runner"
skip_install = true

[tool.tox.env.lower]
dependency_groups = ["dev", "lower"]
description = "Run the tests with lower constraints dependencies"
runner = "uv-venv-runner"

[tool.tox.env.pkg]
commands = [["bash", "./tools/pkg.sh"]]
commands_post = []
commands_pre = []
description = "Build package, verify metadata, install package and assert behavior when ansible is missing."
skip_install = true

[tool.tox.env_run_base]
allowlist_externals = ["find", "git", "rm", "sh", "bash"]
commands = [
  [
    "coverage",
    "run",
    "-m",
    "pytest",
    {default = ["-ra", "--showlocals", "--doctest-modules", "--durations=10", "-m", "not eco"], extend = true, replace = "posargs"}
  ],
  [
    "sh",
    "-c",
    "coverage combine -a -q --data-file={env_dir}/.coverage {work_dir}/*/.coverage.* && coverage xml --data-file={env_dir}/.coverage -o {env_dir}/coverage.xml --fail-under=0 && coverage report --data-file={env_dir}/.coverage"
  ]
]
commands_pre = [["sh", "-c", "rm -f {env_dir}/.coverage* 2>/dev/null || true"]]
description = "Run tests"
group = "test"
package = "editable"
pass_env = [
  "CI",
  "CURL_CA_BUNDLE",
  "FORCE_COLOR",
  "GH_*",
  "GITHUB_*",
  "HOME",
  "LANG",
  "LC_*",
  "NO_COLOR",
  "PYTEST_*",
  "PYTEST_REQPASS",
  "PYTHON*",
  "PYTHONBREAKPOINT",
  "PYTHONHTTPSVERIFY",
  "PYTHONIOENCODING",
  "PYTHONPYCACHEPREFIX",
  "PY_COLORS",
  "PRE_COMMIT_HOME",
  "REQUESTS_CA_BUNDLE",
  "RTD_TOKEN",
  "SETUPTOOLS_SCM_DEBUG",
  "SSH_AUTH_SOCK",
  "SSL_CERT_FILE",
  "UV_*"
]
runner = "uv-venv-lock-runner"

[tool.tox.env_run_base.set_env]
ANSIBLE_DEVEL_WARNING = "false"
ANSIBLE_FORCE_COLOR = "1"
ANSIBLE_NOCOWS = "1"
COVERAGE_FILE = "{env:COVERAGE_FILE:{env_dir}/.coverage.{env_name}}"
COVERAGE_PROCESS_START = "{tox_root}/pyproject.toml"
DYLD_FALLBACK_LIBRARY_PATH = "/opt/homebrew/lib:{env:LD_LIBRARY_PATH}"
FORCE_COLOR = "1"
MK_CONFIG_FILE = "/dev/null"
PIP_DISABLE_PIP_VERSION_CHECK = "1"
PRE_COMMIT_COLOR = "always"
PYTHONHASHSEED = "0"
TERM = "dump"

[tool.uv]
# do not include 'lower' constraints in default groups
default-groups = ["dev", "docs"]
package = true
