[tox]
envlist =
    lint
    docs
    pkg
    py
    integration
minversion = 3.23.0
isolated_build = true
skip_missing_interpreters = false
requires =
    tox-extra

[testenv]
description = Run the tests with pytest
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
    PIP_CONSTRAINT = {toxinidir}/.config/requirements.txt
    PIP_DISABLE_PIP_VERSION_CHECK = 1
    PYTHONHASHSEED = 0
    VIRTUALENV_NO_DOWNLOAD = 1
    PYTEST_REQPASS = 7
passenv =
    HOME
    PYTEST_*
    PYTHONHTTPSVERIFY
    REQUESTS_CA_BUNDLE
    SHELL
    SSL_CERT_FILE
    SSH_AUTH_SOCK
    TERM
    TMPDIR
    http_proxy
    https_proxy
    no_proxy
allowlist_externals =
    bash
    rm
    sh
commands =
    ; pytest {tty:--color=yes}
    coverage run -m pytest {posargs:\
        -ra \
        --showlocals \
        --doctest-modules \
        --durations=10 \
        -m "not eco" \
        }
    sh -c "coverage combine -a -q --data-file=.coverage .tox/.coverage.*"
deps =
    -e .[test]

[testenv:deps]
description = Update dependency lock files
# Force it to use oldest supported version of python or we would lose ability
# to get pinning correctly.
basepython = python3.8
deps =
    pip-tools >= 6.12.3
setenv =
    PIP_CONSTRAINT=
commands =
    pip-compile --upgrade --resolver=backtracking --no-annotate --strip-extras --output-file=.config/requirements.txt --extra test setup.cfg

[testenv:docs]
description = Builds docs
extras =
  docs
setenv =
  # Disable colors until markdown-exec supports it:
  # https://github.com/pawamoy/markdown-exec/issues/11
  NO_COLOR = 1
  TERM = dump
skip_install = false
usedevelop = true
commands =
  mkdocs build {posargs:}

[testenv:lint]
description = Run linters
passenv = {[testenv]passenv}
          # without PROGRAMDATA cloning using git for Windows will fail with an
          # `error setting certificate verify locations` error
          PROGRAMDATA
extras = lint
deps =
    pre-commit >= 2.4.0
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
# don't install package itself in this env
skip_install = true
setenv =
    PIP_CONSTRAINT=
commands =
    python -m pre_commit run {tty:--color=always} --all-files --show-diff-on-failure

[testenv:integration]
description = Run integrations tests
setenv =
    ANSIBLE_NOCOWS=1
    ANSIBLE_FORCE_COLOR=1
deps =
    -e .[test]
    ansible-core>=2.12
commands =
    mk test-integration

[testenv:pkg]
description =
    Do packaging/distribution. If tag is not present or PEP440 compliant upload to
    PYPI could fail
deps =
    collective.checkdocs >= 0.2
    build >= 0.3.1.post1
    twine >= 1.14.0
commands =
    rm -rfv {toxinidir}/dist/
    python -m build \
      --sdist \
      --wheel \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    # metadata validation
    python -m twine check --strict {toxinidir}/dist/*

[testenv:coverage]
description = Combines and displays coverage results
skip_install = true
usedevelop = false
setenv =
  COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
commands =
  python3 -m coverage --version
  # needed by codecov github actions, also ignored result to reach report one.
  python3 -m coverage xml --fail-under=0
  # just for humans running it:
  python3 -m coverage report
deps =
  coverage[toml]>=7.0.5
