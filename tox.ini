[tox]
envlist =
  lint
  docs
  pkg
  py
  lower
  integration
minversion = 4.15.1
isolated_build = true
skip_missing_interpreters = true
requires =
  tox >= 4.15.1
  tox-extra
  setuptools >= 65.3.0 # editable installs
  pip >= 24.0

[testenv]
description = Run the tests with pytest
extras =
    test
commands_pre =
  sh -c "rm -f {envdir}/.coverage* 2>/dev/null || true"
commands =
  coverage run -m pytest {posargs:\
   -ra \
   --showlocals \
   --doctest-modules \
   --durations=10 \
   -m "not eco" \
   }
  {py,py310,py311,py312,py313}: sh -c "coverage combine -a -q --data-file={envdir}/.coverage {envdir}/.coverage.* && coverage xml --data-file={envdir}/.coverage -o {envdir}/coverage.xml --fail-under=0 && coverage report --data-file={envdir}/.coverage"
passenv =
  CURL_CA_BUNDLE  # https proxies, https://github.com/tox-dev/tox/issues/1437
  FORCE_COLOR
  HOME
  LANG
  LC_*
  NO_COLOR
  PYTEST_*
  PYTEST_*  # allows developer to define their own preferences
  PYTEST_REQPASS  # needed for CI
  PYTHON*  # PYTHONPYCACHEPREFIX, PYTHONIOENCODING, PYTHONBREAKPOINT,...
  PYTHONHTTPSVERIFY
  REQUESTS_CA_BUNDLE
  SETUPTOOLS_SCM_DEBUG
  SHELL
  SSH_AUTH_SOCK
  SSL_CERT_FILE
  TERM
  TMPDIR
  http_proxy
  https_proxy
  no_proxy
setenv =
  COVERAGE_FILE = {env:COVERAGE_FILE:{envdir}/.coverage.{envname}}
  COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
  FORCE_COLOR = 1
  PIP_CONSTRAINT = {toxinidir}/.config/constraints.txt
  PIP_DISABLE_PIP_VERSION_CHECK = 1
  PRE_COMMIT_COLOR = always
  PYTHONHASHSEED = 0
  VIRTUALENV_NO_DOWNLOAD = 1
  devel,pkg,pre: PIP_CONSTRAINT = /dev/null

allowlist_externals =
    bash
    find
    rm
    sh
package = editable

[testenv:lower]
description = Install using lower-constraints.txt file for testing oldest versions.
setenv =
  PIP_CONSTRAINT = {toxinidir}/.github/lower-constraints.txt
commands_post =
  pip --version
  pip check
  pip freeze

[testenv:deps]
description = Update dependency lock files
skip_install = true
deps =
    {[testenv:lint]deps}
setenv =
    PIP_CONSTRAINT=
commands =
    pre-commit run --all-files --show-diff-on-failure --hook-stage manual deps

[testenv:docs]
description = Builds docs
extras =
  docs
setenv =
  # Disable colors until markdown-exec supports it:
  # https://github.com/pawamoy/markdown-exec/issues/11
  NO_COLOR = 1
  TERM = dump
skip_install = false
usedevelop = true
commands =
  mkdocs build {posargs:}

[testenv:lint]
description = Run linters
passenv = {[testenv]passenv}
          # without PROGRAMDATA cloning using git for Windows will fail with an
          # `error setting certificate verify locations` error
          PROGRAMDATA
extras = lint
deps =
    pre-commit >= 2.4.0
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
# don't install package itself in this env
skip_install = true
setenv =
    PIP_CONSTRAINT=
commands =
    pre-commit run {tty:--color=always} --all-files --show-diff-on-failure
    pre-commit run --all-files --show-diff-on-failure --hook-stage manual lock

[testenv:integration]
description = Run integrations tests
setenv =
    ANSIBLE_NOCOWS=1
    ANSIBLE_FORCE_COLOR=1
extras =
    test
deps =
    ansible-core>=2.15
    nox>=2024.3
commands =
    ansible --version
    nox --version
    mk test-integration
package = editable

[testenv:pkg]
description =
  Build package, verify metadata, install package and assert behavior when ansible is missing.
deps =
  build >= 0.9.0
  twine >= 4.0.1
commands_pre =
commands =
  rm -rfv {toxinidir}/dist/
  python3 -m build --sdist --wheel --outdir {toxinidir}/dist/ {toxinidir}
  # metadata validation
  python3 -m twine check --strict {toxinidir}/dist/*

[testenv:clean]
description = Remove temporary files
skip_install = true
deps =
commands_pre =
commands_post =
commands =
  find . -type d \( -name __pycache__ -o -name .mypy_cache \) -delete
  find . -type f \( -name '*.py[co]' -o -name ".coverage*" -o -name coverage.xml \) -delete

[testenv:coverage]
description = Combines and displays coverage results
skip_install = true
usedevelop = false
setenv =
  COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
commands_pre =
commands =
  python3 -m coverage --version
  # needed by codecov github actions, also ignored result to reach report one.
  python3 -m coverage xml --fail-under=0
  # just for humans running it:
  python3 -m coverage report
deps =
  coverage[toml]>=7.0.5
